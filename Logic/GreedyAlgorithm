#lang racket

(require racket)

;Returns the bigger number of the list
(define (getNumMax listMax num)
  (cond ((null? listMax)
         num)
        ((>= (car listMax)num)
         (getNumMax (cdr listMax)(car listMax)))
        (else
         (getNumMax (cdr listMax) num))))

;Returns the smallest member of the list
(define (getNumMin listMin num)
  (cond ((null? listMin)
         num)
        ((<= (car listMin)num)
         (getNumMin (cdr listMin)(car listMin)))
        (else
         (getNumMin (cdr listMin)num))))

;Returns the desired value found in the position of the matrix
(define (getMatrixValue matrix i j)
  (cond ((null? matrix)#f)
        ((equal? i 0)
         (getMatrixValueAux (car matrix) j))
        (else
         (getMatrixValue (cdr matrix) (- i 1) j))))

;Travels the columns of the matrix searching for the desired value
(define (getMatrixValueAux matrix j)
  (cond ((null? matrix) #f)
        ((equal? j 0)
         (car matrix))
        (else (getMatrixValueAux (cdr matrix) (- j 1)))))

;Function that appends a new value and returns the matrix
(define(appendValueMatrix matrix i j newValue)
  (cond ((null? matrix)
         '())
        ((equal? i 0)
         (append (list(appendValueMatrixAux(car matrix) j newValue))(cdr matrix)))
        (else
         (append(list(car matrix))(appendValueMatrixAux(cdr matrix)(- i 1) j newValue)))))

;Recursive Function that appends a new value and returns the matrix
(define (appendValueMatrixAux matrix j newValue)
  (cond ((null? matrix)
         '())
        ((equal? j 0)
         (cons newValue (cdr matrix)))
        (else
         (append (list(car matrix))(appendValueMatrixAux(cdr matrix)(- j 1) newValue)))))

;Define el conjunto de:
;Espacios vacios = 0 (candidatos).
;Espacios X = 1 (jugador).
;Espacios O = -1 (maquina).
(define (candidateSet matrix x y M N num)
  (cond ((equal? x M)
                 '())
        (else
         (append(candidateSetAux (car matrix) x y M N num)
                (candidateSet (cdr matrix) (+ x 1) y M N num)))))


(define (candidateSetAux matrix x y M N num)
  (cond ((equal? y N)
         '())
        (else
         (cond ((equal? (car matrix) num)
                (cons (list x y)(candidateSetAux (cdr matrix) x (+ y 1) M N num)))
               (else
                (candidateSetAux (cdr matrix) x (+ y 1) M N num))))))

; Verifies how many moves are left 
(define (movesLeft matrix M N)
  (cond ((equal? (candidateSet matrix 0 0 M N 0) '())
         #f)
        (else #t)))

         