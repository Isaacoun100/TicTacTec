#lang racket

(require racket)

;Returns the bigger number of the list
(define (getNumMax listMax num)
  (cond ((null? listMax)
         num)
        ((>= (car listMax)num)
         (getNumMax (cdr listMax)(car listMax)))
        (else
         (getNumMax (cdr listMax) num))))

;Returns the smallest member of the list
(define (getNumMin listMin num)
  (cond ((null? listMin)
         num)
        ((<= (car listMin)num)
         (getNumMin (cdr listMin)(car listMin)))
        (else
         (getNumMin (cdr listMin)num))))

;Returns the desired value found in the position of the matrix
(define (getMatrixValue matrix i j)
  (cond ((null? matrix)#f)
        ((equal? i 0)
         (getMatrixValueAux (car matrix) j))
        (else
         (getMatrixValue (cdr matrix) (- i 1) j))))

;Travels the columns of the matrix searching for the desired value
(define (getMatrixValueAux matrix j)
  (cond ((null? matrix) #f)
        ((equal? j 0)
         (car matrix))
        (else (getMatrixValueAux (cdr matrix) (- j 1)))))

;Function that appends a new value and returns the matrix
(define(appendValueMatrix matrix i j newValue)
  (cond ((null? matrix)
         '())
        ((equal? i 0)
         (append (list(appendValueMatrixAux(car matrix) j newValue))(cdr matrix)))
        (else
         (append(list(car matrix))(appendValueMatrixAux(cdr matrix)(- i 1) j newValue)))))

;Recursive Function that appends a new value and returns the matrix
(define (appendValueMatrixAux matrix j newValue)
  (cond ((null? matrix)
         '())
        ((equal? j 0)
         (cons newValue (cdr matrix)))
        (else
         (append (list(car matrix))(appendValueMatrixAux(cdr matrix)(- j 1) newValue)))))

;Empty spaces are represented as a 0, the symbol X is used for the players represented as 1 on the matrix,
;and O is represented for the machine using -1 on the matrix.
(define (setCandidates matrix i j M N num)
  (cond ((equal? i M)
         '())
        (else (append(setCandidatesAux (car matrix) i j M N num)
                     (setCandidates (cdr matrix)(+ i 1) j M N num)))))


;Auxiliar function for candidateSet
(define (setCandidatesAux matrix i j M N num)
  (cond ((equal? j N)
         '())
        (else
         (cond ((equal? (car matrix) num)
                (cons (list i j)(setCandidatesAux (cdr matrix) i (+ j 1) M N num)))
               (else
                (setCandidatesAux (cdr matrix) i (+ j 1) M N num))))))

; Verifies how many moves are left to do
(define (movesLeft matrix M N)
  (cond ((equal? (setCandidates matrix 0 0 M N 0) '())
         #f)
        (else #t)))

         