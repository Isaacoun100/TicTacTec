#lang racket

(require racket)

#| In the following section you will find the fuctions responsible for the checking if
 # the player or the machine, won or draw. We should corroborate the matrix vertically,
 # horizontaly and diagonally to check if we have a win, or a draw. The methods shown
 # displayed  below will be executed every turn to confirm if someone won, we have a
 # draw or the game continues
|#

; Returns true or false depending on whether or not there's a horizontal win
(define (checkHorizontal matrix M N I J num)
  (cond ((equal? I M)#f) 
        ((equal? J N)#f)
        ((and(equal?(getMatrix matrix I J) num)
             (checkHorizontalAux matrix M N I (+ J 1) num))
         #t)
        (else (checkHorizontal matrix M N (+ I 1) J num))))

; Auxiliary function for the checkHorizontal function
(define (checkHorizontalAux matrix M N I J num)
  (cond ((equal? I M)#f)
        ((equal? J N)#t)
        ((and
          (equal?(getMatrix matrix I J) num)
          (checkHorizontalAux matrix M N I (+ J 1) num))
         #t)
        (else #f)))  

 ; Returns true or false depending on whether or not there's a vertical win
(define (checkVertical matrix M N I J num)
  (cond ((equal? J N)#f)
        ((equal? I M)#f)
        ((and(equal? (getMatrix matrix I J) num)
             (checkVerticalAux matrix M N (+ I 1) J num))#t)
        
        (else
         (checkVertical matrix M N 0 (+ J 1) num))))

; Auxiliary function for the checkVertical function
(define (checkVerticalAux matrix M N I J num)
  (cond ((equal? J N)#f)
        ((equal? I M)#t)
        ((and(equal? (getMatrix matrix I J) num)
             (checkVerticalAux matrix M N (+ I 1) J num))#t)
        (else #f)))

 ; Return true or false depending on whether
(define (checkDiagonal matrix M N num)
  (cond ((checkFirstDiagonal  matrix M N 0 0 num) #t)
        ((checkSecondDiagonal  matrix M N 0 0 num) #t)
        (else #f)))

; Auxiliary function for the checkVertical function that navigates through the matrix
; from left to right checking for existing diagonals and wheather or not they're filled
; with X or O
(define (checkFirstDiagonal matrix M N I J num)
  (cond ((equal? J N) #f)
        ((or (>= (+ I 2) M) (>= (+ J 2) N))
         (checkFirstDiagonal matrix M N 0 (+ J 1) num))
        ((and (equal? (getMatrix matrix I J) (getMatrix matrix (+ I 1) (+ J 1)))
              (equal? (getMatrix matrix (+ I 1) (+ J 1)) (getMatrix matrix (+ I 2) (+ J 2)))
              (equal? (getMatrix matrix (+ I 2) (+ J 2)) num))
         (cond ((or (>= (+ I 3) M) (>= (+ J 3) N))
                #t)
               (else (checkFirstDiagonal matrix M N (+ I 1) (+ J 1) num))))
        (else (checkFirstDiagonal matrix M N 0 (+ J 1) num))))

; Auxiliary function for the checkVertical function that navigates through the matrix
; from top to bottom checking for existing diagonals and wheather or not they're filled
; with X or O
(define (checkSecondDiagonal matrix M N I J num)
  (cond ((equal? I M) #f)
        ((or (>= (+ I 2) M) (>= (+ J 2) N))
         (checkSecondDiagonal matrix M N (+ I 1) 0 num))
        ((and (equal? (getMatrix matrix I J) (getMatrix matrix (+ I 1) (+ J 1)))
              (equal? (getMatrix matrix (+ I 1) (+ J 1)) (getMatrix matrix (+ I 2) (+ J 2)))
              (equal? (getMatrix matrix (+ I 2) (+ J 2)) num))
         (cond ((or (>= (+ I 3) M) (>= (+ J 3) N))
                #t)
               (else (checkSecondDiagonal matrix M N (+ I 1) (+ J 1) num))))
        (else (checkSecondDiagonal matrix M N (+ I 1) 0 num))))


; This funtion will return 10 if the player has won, -10 if the computer won or 0
; there no winner yet

(define (getState matrix M N)
  (cond ((checkVertical matrix M N 0 0 1)
         10) ; Check if the player won vertically
        ((checkVertical matrix M N 0 0 -1)
         -10) ; Check if the machine won vertically
        
        ((checkHorizontal matrix M N 0 0 1)
         10) ; Check if the player won horizontally
        ((checkHorizontal matrix M N 0 0 -1)
         -10) ; Check if the machine won horizontally
        
        ((CheckDiagonal matrix M N 1)
         10); Check if the player won diagonally
        ((CheckDiagonal matrix M N -1)
         -10); Check if the machine won diagonally
        
        (else 0))) ; There's no winner yet









